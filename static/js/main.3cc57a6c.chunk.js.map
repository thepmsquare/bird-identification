{"version":3,"sources":["placeholder.jpg","IUCNToken.js","Identification.js","IdentificationByLocation.js","IdentificationByEndangeredSpecies.js","Credits.js","App.js","serviceWorker.js","index.js"],"names":["IUCNToken","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","Provider","value","height","map","reduce","a","b","width","outerElementType","innerElementType","overscanCount","renderGroup","params","component","group","key","Identification","componentDidMount","id","searchforThisBird","loadUniqueCommonNames","allCommonNames","allBirdsWithCommonNames","forEach","bird","push","commonNames","uniqueCommonNames","Set","autocompleteOptions","sort","toUpperCase","localeCompare","handleSearchValueChange","event","newValue","setState","searchValue","handleSearchInputValueChange","searchInputValue","handleSearchInputsClear","handleSearchSubmit","e","preventDefault","state","isLoading","showingResults","display","birdID","find","ele","includes","fetchDetailsFromAPI","snackbarOpen","snackbarMessage","handleClickOnCameraIcon","fileSelector","document","createElement","setAttribute","click","onchange","selectedImageToHTMLElement","fReader","FileReader","selectedImageHTML","readAsDataURL","target","files","onloadend","src","result","handleImageSubmit","URL","tmImage","model","predict","allPredictions","sortedPredictions","element1","element2","probability","findBirdIDFromImage","prediction","imageModelIDs","className","axios","get","APItoken","individualSpeciesByID","countryOccuranceByID","historicalAssessmentsByID","habitatsByID","threatsByID","actionsByID","title","main_common_name","taxonomy","class","family","genus","kingdom","order","phylum","scientific_name","geographicRange","country","code","Math","random","population","trend","population_trend","timeline","JSON","parse","stringify","habitats","habitat","threats","threat","timing","score","actions","action","audioURL","soundUrl","fetchJsonp","wikiJsonpResponse","json","parsedJson","Object","values","query","pages","original","imageURL","source","handleAccordianToggle","name","curState","accordionsCopy","accordions","toggleThis","isOpen","handleCloseResults","handleSnackbarClose","toTitleCase","str","replace","txt","charAt","substr","toLowerCase","changeId","render","Typography","variant","noValidate","autoComplete","onSubmit","Autocomplete","onChange","inputValue","onInputChange","disableClearable","forcePopupIcon","disableListWrap","options","renderInput","TextField","label","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","renderOption","option","noWrap","Backdrop","open","zIndex","CircularProgress","color","to","Slide","direction","in","mountOnEnter","unmountOnExit","Card","elevation","CardHeader","subheader","CardMedia","image","placeholder","paddingTop","backgroundSize","CardContent","volume","variation","Accordion","expanded","AccordionSummary","expandIcon","AccordionDetails","TableContainer","Table","TableBody","TableRow","TableCell","tooltipTextFunction","countryName","strokeOpacity","size","window","innerWidth","Timeline","align","year","TimelineItem","TimelineSeparator","Avatar","TimelineContent","category","CardActions","Button","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Fragment","aria-label","fontSize","Component","IdentificationByLocation","loadAllCountries","countryCodes","countryCode","Country","handleClickOnMapIcon","isMapDialogOpen","Code","handleMapDialogClose","checkCategory","acronym","speciesByCountry","birdsByCountry","filter","species","some","categories","birds","commonName","taxonid","handleBirdSearch","history","Dialog","onClickFunction","Paper","stickyHeader","TableHead","IdentificationByEndangeredSpecies","Credits","App","newId","exact","path","routeProps","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cc57a6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.9b0c3ed8.jpg\";","const IUCNToken =\r\n  \"f0512ef563faeb29b764227cc256fb6ebab2568eb1d3c0aaad1f5474ab32b0b6\";\r\nexport default IUCNToken;\r\n","import React, { Component } from \"react\";\r\nimport * as tmImage from \"@teachablemachine/image\";\r\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\r\nimport placeholder from \"./placeholder.jpg\";\r\nimport { VariableSizeList } from \"react-window\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport imageModelIDs from \"./imageModelIDs.json\";\r\nimport AudioPlayer from \"material-ui-audio-player\";\r\nimport fetchJsonp from \"fetch-jsonp\";\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/Identification.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//copy pasted from mui website to virtualize dropdown\r\nconst LISTBOX_PADDING = 8; // px\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  return React.cloneElement(data[index], {\r\n    style: {\r\n      ...style,\r\n      top: style.top + LISTBOX_PADDING,\r\n    },\r\n  });\r\n}\r\nconst OuterElementContext = React.createContext({});\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n  const outerProps = React.useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\nfunction useResetCache(data) {\r\n  const ref = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(\r\n  props,\r\n  ref\r\n) {\r\n  const { children, ...other } = props;\r\n  const itemData = React.Children.toArray(children);\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up(\"sm\"), { noSsr: true });\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 48;\r\n\r\n  const getChildSize = (child) => {\r\n    if (React.isValidElement(child) && child.type === ListSubheader) {\r\n      return 48;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n  const gridRef = useResetCache(itemCount);\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={(index) => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}\r\n        >\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\nListboxComponent.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\nconst renderGroup = (params) => [\r\n  <ListSubheader key={params.key} component=\"div\">\r\n    {params.group}\r\n  </ListSubheader>,\r\n  params.children,\r\n];\r\n\r\nclass Identification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: null,\r\n      searchInputValue: \"\",\r\n      showingResults: false,\r\n      display: {},\r\n      isLoading: false,\r\n      snackbarOpen: false,\r\n      snackbarMessage: \"\",\r\n      accordions: [\r\n        { name: \"Taxonomy\", isOpen: true },\r\n        { name: \"Geographic Range\", isOpen: true },\r\n        { name: \"Population\", isOpen: true },\r\n        { name: \"Habitat and Ecology\", isOpen: true },\r\n        { name: \"Threats\", isOpen: true },\r\n        { name: \"Conservation Actions\", isOpen: true },\r\n      ],\r\n    };\r\n    this.loadUniqueCommonNames();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.id) this.searchforThisBird(this.props.id);\r\n  };\r\n\r\n  loadUniqueCommonNames = () => {\r\n    this.allCommonNames = [];\r\n    allBirdsWithCommonNames.forEach((bird) => {\r\n      this.allCommonNames.push(...bird.commonNames);\r\n    });\r\n    this.uniqueCommonNames = [...new Set(this.allCommonNames)];\r\n    this.autocompleteOptions = this.uniqueCommonNames.sort((a, b) =>\r\n      a.toUpperCase().localeCompare(b.toUpperCase())\r\n    );\r\n  };\r\n\r\n  handleSearchValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchInputValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputsClear = () => {\r\n    this.setState(() => {\r\n      return { searchValue: null, searchInputValue: \"\" };\r\n    });\r\n  };\r\n\r\n  handleSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchValue) {\r\n      this.setState(\r\n        () => {\r\n          return { isLoading: true, showingResults: false, display: {} };\r\n        },\r\n        () => {\r\n          let birdID = allBirdsWithCommonNames.find((ele) => {\r\n            return ele.commonNames.includes(this.state.searchValue);\r\n          }).id;\r\n          this.fetchDetailsFromAPI(birdID);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          snackbarOpen: true,\r\n          snackbarMessage: \"Empty Input\",\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClickOnCameraIcon = () => {\r\n    const fileSelector = document.createElement(\"input\");\r\n    fileSelector.setAttribute(\"type\", \"file\");\r\n    fileSelector.click();\r\n    fileSelector.onchange = this.selectedImageToHTMLElement;\r\n  };\r\n\r\n  selectedImageToHTMLElement = (e) => {\r\n    const fReader = new FileReader();\r\n    this.selectedImageHTML = document.createElement(\"img\");\r\n    fReader.readAsDataURL(e.target.files[0]);\r\n    fReader.onloadend = (event) => {\r\n      this.selectedImageHTML.src = event.target.result;\r\n    };\r\n    this.handleImageSubmit();\r\n    this.setState(() => {\r\n      return {\r\n        snackbarOpen: true,\r\n        snackbarMessage: \"Image Loaded!\",\r\n      };\r\n    });\r\n  };\r\n\r\n  handleImageSubmit = () => {\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          isLoading: true,\r\n          showingResults: false,\r\n          display: {},\r\n        };\r\n      },\r\n      async () => {\r\n        const URL = \"https://teachablemachine.withgoogle.com/models/-7mqg1t6m/\";\r\n        const modelURL = URL + \"model.json\";\r\n        const metadataURL = URL + \"metadata.json\";\r\n\r\n        try {\r\n          const model = await tmImage.load(modelURL, metadataURL);\r\n          const allPredictions = await model.predict(\r\n            this.selectedImageHTML,\r\n            false\r\n          );\r\n          const sortedPredictions = allPredictions.sort(\r\n            (element1, element2) => element2.probability - element1.probability\r\n          );\r\n          this.findBirdIDFromImage(sortedPredictions[0]);\r\n        } catch (error) {\r\n          this.setState(() => {\r\n            return {\r\n              isLoading: false,\r\n              snackbarMessage: \"Error in Identification\",\r\n              snackbarOpen: true,\r\n            };\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  findBirdIDFromImage = (prediction) => {\r\n    let birdID = imageModelIDs.find((ele) => {\r\n      return ele.bird === prediction.className;\r\n    }).id;\r\n    this.fetchDetailsFromAPI(birdID, prediction);\r\n  };\r\n\r\n  fetchDetailsFromAPI = async (birdID, prediction) => {\r\n    try {\r\n      let display = {};\r\n      if (prediction) {\r\n        display.prediction = prediction;\r\n      }\r\n      const individualSpeciesByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const countryOccuranceByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/countries/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const historicalAssessmentsByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/history/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const habitatsByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/habitats/species/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const threatsByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/threats/species/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const actionsByID = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/measures/species/id/\" +\r\n          birdID +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n\r\n      display.title = individualSpeciesByID.data.result[0].main_common_name;\r\n      display.taxonomy = {\r\n        class: individualSpeciesByID.data.result[0].class,\r\n        family: individualSpeciesByID.data.result[0].family,\r\n        genus: individualSpeciesByID.data.result[0].genus,\r\n        kingdom: individualSpeciesByID.data.result[0].kingdom,\r\n        order: individualSpeciesByID.data.result[0].order,\r\n        phylum: individualSpeciesByID.data.result[0].phylum,\r\n        scientific_name: individualSpeciesByID.data.result[0].scientific_name,\r\n      };\r\n      display.geographicRange = countryOccuranceByID.data.result.map((ele) => {\r\n        return { country: ele.code, value: Math.random() };\r\n      });\r\n      display.population = {\r\n        trend: individualSpeciesByID.data.result[0].population_trend,\r\n        timeline: JSON.parse(\r\n          JSON.stringify(historicalAssessmentsByID.data.result)\r\n        ),\r\n      };\r\n      display.habitats = habitatsByID.data.result.map(\r\n        (habitat) => habitat.habitat\r\n      );\r\n      display.threats = threatsByID.data.result.map((threat) => {\r\n        return {\r\n          title: threat.title,\r\n          timing: threat.timing,\r\n          score: threat.score,\r\n        };\r\n      });\r\n      display.actions = actionsByID.data.result.map((action) => action.title);\r\n      display.audioURL = allBirdsWithCommonNames.find(\r\n        (bird) => bird.id === birdID\r\n      ).soundUrl;\r\n      let wikiJsonpResponse = await fetchJsonp(\r\n        \"https://en.wikipedia.org/w/api.php?format=json&action=query&titles=\" +\r\n          individualSpeciesByID.data.result[0].scientific_name +\r\n          \"&prop=pageimages&piprop=original&redirects=true\"\r\n      );\r\n\r\n      let parsedJson = await wikiJsonpResponse.json();\r\n\r\n      if (Object.values(parsedJson.query.pages)[0].original) {\r\n        display.imageURL = Object.values(\r\n          parsedJson.query.pages\r\n        )[0].original.source;\r\n      }\r\n      this.setState(() => {\r\n        return {\r\n          display,\r\n          showingResults: true,\r\n          isLoading: false,\r\n        };\r\n      });\r\n    } catch (error) {\r\n      this.setState(() => {\r\n        return {\r\n          isLoading: false,\r\n          snackbarMessage: \"Error in Fetching Details\",\r\n          snackbarOpen: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAccordianToggle = (name) => {\r\n    this.setState((curState) => {\r\n      let accordionsCopy = JSON.parse(JSON.stringify(curState.accordions));\r\n      let toggleThis = accordionsCopy.find((ele) => ele.name === name);\r\n      toggleThis.isOpen\r\n        ? (toggleThis.isOpen = false)\r\n        : (toggleThis.isOpen = true);\r\n      return {\r\n        accordions: accordionsCopy,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleCloseResults = () => {\r\n    this.setState(() => {\r\n      return { showingResults: false, display: {} };\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = () => {\r\n    this.setState(() => {\r\n      return { snackbarOpen: false, snackbarMessage: \"\" };\r\n    });\r\n  };\r\n\r\n  toTitleCase = (str) => {\r\n    return str.replace(/\\w\\S*/g, (txt) => {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n  };\r\n\r\n  searchforThisBird = (id) => {\r\n    this.setState(\r\n      () => {\r\n        return { isLoading: true, showingResults: false, display: {} };\r\n      },\r\n      () => {\r\n        this.fetchDetailsFromAPI(this.props.id);\r\n        this.props.changeId(null);\r\n      }\r\n    );\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"Identification\">\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Bird Identification\r\n        </Typography>\r\n\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSearchSubmit}>\r\n          <Autocomplete\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValueChange}\r\n            inputValue={this.state.searchInputValue}\r\n            onInputChange={this.handleSearchInputValueChange}\r\n            disableClearable\r\n            forcePopupIcon={false}\r\n            disableListWrap\r\n            ListboxComponent={ListboxComponent}\r\n            renderGroup={renderGroup}\r\n            options={this.autocompleteOptions}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      {this.state.searchInputValue && (\r\n                        <IconButton onClick={this.handleSearchInputsClear}>\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      <IconButton onClick={this.handleClickOnCameraIcon}>\r\n                        <PhotoCameraIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={this.handleSearchSubmit}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n          />\r\n        </form>\r\n        <Backdrop open={this.state.isLoading} style={{ zIndex: 10 }}>\r\n          {this.state.isLoading && <CircularProgress color=\"inherit\" />}\r\n        </Backdrop>\r\n        {!this.state.showingResults && (\r\n          <div className=\"Identification-Links\">\r\n            <Link to=\"/bird-identification/locations\">\r\n              <Typography>Location-Wise Search</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification/endangered\">\r\n              <Typography>Endangered Birds</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification\">\r\n              <Typography>Featured bird: White-headed Duck</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification/credits\">\r\n              <Typography>Credits</Typography>\r\n            </Link>\r\n          </div>\r\n        )}\r\n        {this.state.showingResults && (\r\n          <Slide\r\n            direction=\"up\"\r\n            in={this.state.showingResults}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            className=\"Identification-Results\"\r\n          >\r\n            <Card elevation={4}>\r\n              <CardHeader\r\n                title={`${this.state.display.title}`}\r\n                subheader={\r\n                  this.state.display.prediction\r\n                    ? `Prediction: ${\r\n                        this.state.display.prediction.className\r\n                      }, ${this.state.display.prediction.probability * 100}%`\r\n                    : \"\"\r\n                }\r\n              />\r\n              <CardMedia\r\n                image={\r\n                  this.state.display.imageURL\r\n                    ? this.state.display.imageURL\r\n                    : placeholder\r\n                }\r\n                style={{ paddingTop: \"56.25%\", backgroundSize: \"contain\" }}\r\n              />\r\n              {this.state.display.audioURL && (\r\n                <CardContent>\r\n                  <AudioPlayer\r\n                    src={`https:${this.state.display.audioURL}`}\r\n                    volume={false}\r\n                    width=\"inital\"\r\n                    variation=\"primary\"\r\n                    type=\"audio/mpeg\"\r\n                  />\r\n                </CardContent>\r\n              )}\r\n              <CardContent>\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find((ele) => ele.name === \"Taxonomy\")\r\n                      .isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Taxonomy\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Taxonomy</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <TableContainer>\r\n                      <Table>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell>Scientific Name</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.scientific_name\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Kingdom</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.kingdom\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Phylum</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.phylum\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Class</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.class\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Order</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.order\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Family</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.family\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Genus</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.genus\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Geographic Range\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Geographic Range\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Geographic Range</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-GeographicRange\">\r\n                      <WorldMap\r\n                        color=\"#1976d2\"\r\n                        data={this.state.display.geographicRange}\r\n                        tooltipTextFunction={(countryName) => countryName}\r\n                        strokeOpacity=\"100%\"\r\n                        size={\r\n                          window.innerWidth >= 768\r\n                            ? window.innerWidth >= 1920\r\n                              ? \"lg\"\r\n                              : \"md\"\r\n                            : \"sm\"\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Population\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Population\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Population</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-Population\">\r\n                      <Typography>\r\n                        Population Trend: {this.state.display.population.trend}\r\n                      </Typography>\r\n                      <Timeline align=\"alternate\">\r\n                        {this.state.display.population.timeline.map((year) => (\r\n                          <TimelineItem key={year.year}>\r\n                            <TimelineSeparator>\r\n                              <Avatar variant=\"square\">{year.year}</Avatar>\r\n                            </TimelineSeparator>\r\n                            <TimelineContent>\r\n                              <Typography>{year.category}</Typography>\r\n                            </TimelineContent>\r\n                          </TimelineItem>\r\n                        ))}\r\n                      </Timeline>\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Habitat and Ecology\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Habitat and Ecology\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Habitat and Ecology</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <TableContainer>\r\n                      <Table>\r\n                        <TableBody>\r\n                          {this.state.display.habitats.map((habitat, index) => (\r\n                            <TableRow key={index}>\r\n                              <TableCell>{habitat}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                {this.state.display.threats.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Threats\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() => this.handleAccordianToggle(\"Threats\")}\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Threats</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <TableContainer>\r\n                        <Table>\r\n                          <TableBody>\r\n                            {this.state.display.threats.map((threat, index) => (\r\n                              <TableRow key={index}>\r\n                                <TableCell>{threat.title}</TableCell>\r\n                                <TableCell>{threat.timing}</TableCell>\r\n                                <TableCell>{threat.score}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n\r\n                {this.state.display.actions.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Conservation Actions\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() =>\r\n                        this.handleAccordianToggle(\"Conservation Actions\")\r\n                      }\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Conservation Actions</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <TableContainer>\r\n                        <Table>\r\n                          <TableBody>\r\n                            {this.state.display.actions.map((action, index) => (\r\n                              <TableRow key={index}>\r\n                                <TableCell>{action}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={this.handleCloseResults}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Slide>\r\n        )}\r\n\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleSnackbarClose}\r\n          message={this.state.snackbarMessage}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Identification;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport countryCodes from \"./countryCodes.json\";\r\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\r\n\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/IdentificationByLocation.css\";\r\nclass IdentificationByLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: null,\r\n      searchInputValue: \"\",\r\n      isMapDialogOpen: false,\r\n      snackbarOpen: false,\r\n      snackbarMessage: \"\",\r\n      showingResults: false,\r\n      display: {},\r\n      isLoading: false,\r\n    };\r\n    this.loadAllCountries();\r\n  }\r\n\r\n  loadAllCountries = () => {\r\n    this.autocompleteOptions = [];\r\n    countryCodes.forEach((countryCode) => {\r\n      this.autocompleteOptions.push(countryCode.Country);\r\n    });\r\n  };\r\n\r\n  handleSearchValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchInputValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputsClear = () => {\r\n    this.setState(() => {\r\n      return { searchValue: null, searchInputValue: \"\" };\r\n    });\r\n  };\r\n\r\n  handleClickOnMapIcon = () => {\r\n    this.setState(() => {\r\n      return { isMapDialogOpen: true };\r\n    });\r\n  };\r\n\r\n  handleSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchValue) {\r\n      this.setState(\r\n        () => {\r\n          return { isLoading: true, showingResults: false, display: {} };\r\n        },\r\n        () => {\r\n          let countryCode = countryCodes.find((country) => {\r\n            return country.Country === this.state.searchValue;\r\n          }).Code;\r\n          this.fetchDetailsFromAPI(countryCode);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          snackbarOpen: true,\r\n          snackbarMessage: \"Empty Input\",\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMapDialogClose = () => {\r\n    this.setState(() => {\r\n      return { isMapDialogOpen: false };\r\n    });\r\n  };\r\n  checkCategory = (acronym) => {\r\n    acronym = acronym.toUpperCase();\r\n    if (acronym === \"LC\") return \"Least-concern\";\r\n    else if (acronym === \"EX\") return \"Extinct\";\r\n    else if (acronym === \"EW\") return \"Extinct in the wild\";\r\n    else if (acronym === \"CR\") return \"Critically endangered\";\r\n    else if (acronym === \"EN\") return \"Endangered\";\r\n    else if (acronym === \"VU\") return \"Vulnerable\";\r\n    else if (acronym === \"NT\") return \"Near threatened\";\r\n    else if (acronym === \"DD\") return \"Data deficient\";\r\n    else if (acronym === \"NE\") return \"Not evaluated\";\r\n    else return acronym;\r\n  };\r\n  fetchDetailsFromAPI = async (country) => {\r\n    try {\r\n      let display = {};\r\n      display.country = countryCodes.find(\r\n        (ele) => ele.Code === country\r\n      ).Country;\r\n      display.data = [];\r\n      const speciesByCountry = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/country/getspecies/\" +\r\n          country +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const birdsByCountry = speciesByCountry.data.result.filter((species) => {\r\n        return allBirdsWithCommonNames.some(\r\n          (ele) => ele.name === species.scientific_name\r\n        );\r\n      });\r\n\r\n      let categories = birdsByCountry.map((bird) => bird.category);\r\n      let uniqueCategories = [...new Set(categories)];\r\n\r\n      uniqueCategories.forEach((category) => {\r\n        display.data.push({\r\n          category: this.checkCategory(category),\r\n          birds: birdsByCountry\r\n            .filter((bird) => bird.category === category)\r\n            .map((ele) => {\r\n              return {\r\n                commonName: allBirdsWithCommonNames.find(\r\n                  (bird) => bird.name === ele.scientific_name\r\n                ).commonNames[0],\r\n                name: ele.scientific_name,\r\n                id: ele.taxonid,\r\n              };\r\n            }),\r\n        });\r\n      });\r\n      this.setState(() => {\r\n        return {\r\n          display,\r\n          showingResults: true,\r\n          isLoading: false,\r\n        };\r\n      });\r\n    } catch (error) {\r\n      this.setState(() => {\r\n        return {\r\n          isLoading: false,\r\n          snackbarMessage: \"Error in Fetching Details\",\r\n          snackbarOpen: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCloseResults = () => {\r\n    this.setState(() => {\r\n      return { showingResults: false, display: {} };\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = () => {\r\n    this.setState(() => {\r\n      return { snackbarOpen: false, snackbarMessage: \"\" };\r\n    });\r\n  };\r\n\r\n  handleBirdSearch = (id) => {\r\n    this.props.changeId(id);\r\n    this.props.history.push(\"/bird-identification\");\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"IdentificationByLocation\">\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Bird Identification\r\n        </Typography>\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSearchSubmit}>\r\n          <Autocomplete\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValueChange}\r\n            inputValue={this.state.searchInputValue}\r\n            onInputChange={this.handleSearchInputValueChange}\r\n            disableClearable\r\n            forcePopupIcon={false}\r\n            disableListWrap\r\n            options={this.autocompleteOptions}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      {this.state.searchInputValue && (\r\n                        <IconButton onClick={this.handleSearchInputsClear}>\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      <IconButton onClick={this.handleClickOnMapIcon}>\r\n                        <MapIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={this.handleSearchSubmit}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n          />\r\n        </form>\r\n        <Dialog\r\n          open={this.state.isMapDialogOpen}\r\n          onClose={this.handleMapDialogClose}\r\n        >\r\n          <WorldMap\r\n            data={countryCodes.map((country) => {\r\n              return {\r\n                country: country.Code,\r\n                value: Math.random(),\r\n              };\r\n            })}\r\n            color=\"#1976d2\"\r\n            tooltipTextFunction={(countryName) => countryName}\r\n            strokeOpacity=\"100%\"\r\n            size=\"lg\"\r\n            onClickFunction={(event, country, code) => {\r\n              this.setState(\r\n                () => {\r\n                  return {\r\n                    isLoading: true,\r\n                    showingResults: false,\r\n                    display: {},\r\n                  };\r\n                },\r\n                () => {\r\n                  this.fetchDetailsFromAPI(code);\r\n                  this.handleMapDialogClose();\r\n                }\r\n              );\r\n            }}\r\n          />\r\n        </Dialog>\r\n        <Backdrop open={this.state.isLoading} style={{ zIndex: 10 }}>\r\n          {this.state.isLoading && <CircularProgress color=\"inherit\" />}\r\n        </Backdrop>\r\n        {!this.state.showingResults && (\r\n          <div className=\"Identification-Links\">\r\n            <Link to=\"/bird-identification\">\r\n              <Typography>Search by Name</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification/endangered\">\r\n              <Typography>Endangered Birds</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification\">\r\n              <Typography>Featured bird: White-headed Duck</Typography>\r\n            </Link>\r\n            <Link to=\"/bird-identification/credits\">\r\n              <Typography>Credits</Typography>\r\n            </Link>\r\n          </div>\r\n        )}\r\n        {this.state.showingResults && (\r\n          <Slide\r\n            direction=\"up\"\r\n            in={this.state.showingResults}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            className=\"Identification-Results\"\r\n          >\r\n            <Card elevation={4}>\r\n              <CardHeader title={`${this.state.display.country}`} />\r\n\r\n              <CardContent>\r\n                {this.state.display.data.map((category) => {\r\n                  return (\r\n                    <TableContainer\r\n                      key={category.category}\r\n                      className=\"IdentificationByCountry-TableContainer\"\r\n                      component={Paper}\r\n                    >\r\n                      <Table stickyHeader>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>{category.category}</TableCell>\r\n                            <TableCell></TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {category.birds.map((bird) => (\r\n                            <TableRow key={bird.id}>\r\n                              <TableCell>{bird.commonName}</TableCell>\r\n                              <TableCell>\r\n                                <IconButton\r\n                                  onClick={() => this.handleBirdSearch(bird.id)}\r\n                                >\r\n                                  <SearchIcon />\r\n                                </IconButton>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  );\r\n                })}\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={this.handleCloseResults}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Slide>\r\n        )}\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleSnackbarClose}\r\n          message={this.state.snackbarMessage}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default IdentificationByLocation;\r\n","import React, { Component } from \"react\";\r\nimport placeholder from \"./placeholder.jpg\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport AudioPlayer from \"material-ui-audio-player\";\r\nimport fetchJsonp from \"fetch-jsonp\";\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/IdentificationByEndangeredSpecies.css\";\r\nclass IdentificationByEndangeredSpecies extends Component {\r\n  render = () => {\r\n    return (\r\n      <div className=\"IdentificationByEndangeredSpecies\">\r\n        <h1>IdentificationByEndangeredSpecies</h1>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default IdentificationByEndangeredSpecies;\r\n","import React, { Component } from \"react\";\r\nimport placeholder from \"./placeholder.jpg\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport AudioPlayer from \"material-ui-audio-player\";\r\nimport fetchJsonp from \"fetch-jsonp\";\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/Credits.css\";\r\nclass Credits extends Component {\r\n  render = () => {\r\n    return (\r\n      <div class=\"Credits\">\r\n        <h1>Credits</h1>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Credits;\r\n","import React, { Component } from \"react\";\nimport Identification from \"./Identification\";\nimport IdentificationByLocation from \"./IdentificationByLocation\";\nimport IdentificationByEndangeredSpecies from \"./IdentificationByEndangeredSpecies\";\nimport Credits from \"./Credits\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: null,\n    };\n  }\n  changeId = (newId) => {\n    this.setState(() => {\n      return { id: newId };\n    });\n  };\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/bird-identification\"\n            render={(routeProps) => (\n              <Identification\n                {...routeProps}\n                changeId={this.changeId}\n                id={this.state.id}\n              />\n            )}\n          ></Route>\n          <Route\n            exact\n            path=\"/bird-identification/locations\"\n            render={(routeProps) => (\n              <IdentificationByLocation\n                {...routeProps}\n                changeId={this.changeId}\n              />\n            )}\n          ></Route>\n          <Route exact path=\"/bird-identification/endangered\">\n            <IdentificationByEndangeredSpecies />\n          </Route>\n          <Route exact path=\"/bird-identification/credits\">\n            <Credits />\n          </Route>\n          <Route path=\"/bird-identification/*\">\n            <Identification />\n          </Route>\n        </Switch>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
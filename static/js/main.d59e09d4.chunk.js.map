{"version":3,"sources":["placeholder.jpg","IUCNToken.js","Identification.js","IdentificationByLocation.js","Credits.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["IUCNToken","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","Provider","value","height","map","reduce","a","b","width","outerElementType","innerElementType","overscanCount","renderGroup","params","component","group","key","Identification","componentDidMount","name","searchforThisBird","componentDidUpdate","loadUniqueCommonNames","allCommonNames","allBirdsWithCommonNames","forEach","bird","push","commonNames","uniqueCommonNames","Set","autocompleteOptions","sort","toUpperCase","localeCompare","handleSearchValueChange","event","newValue","setState","searchValue","handleSearchInputValueChange","searchInputValue","handleSearchInputsClear","handleSearchSubmit","e","preventDefault","state","isLoading","showingResults","display","birdName","find","ele","includes","fetchDetailsFromAPI","snackbarOpen","snackbarMessage","handleClickOnCameraIcon","fileSelector","document","createElement","setAttribute","click","onchange","selectedImageToHTMLElement","fReader","FileReader","selectedImageHTML","readAsDataURL","target","files","onloadend","src","result","selectedImageHTMLSrc","handleImageSubmit","crop","unit","aspect","URL","tmImage","model","predict","allPredictions","sortedPredictions","element1","element2","probability","findBirdNameFromImage","prediction","imageModelNames","className","axios","get","APItoken","individualSpeciesByName","countryOccuranceByName","historicalAssessmentsByName","habitatsByName","threatsByName","actionsByName","title","main_common_name","taxonomy","class","family","genus","kingdom","order","phylum","scientific_name","geographicRange","country","code","Math","random","population","trend","population_trend","timeline","JSON","parse","stringify","habitats","habitat","threats","threat","timing","score","actions","action","audioURL","soundUrl","fetchJsonp","wikiJsonpResponse","json","parsedJson","Object","values","query","pages","original","imageURL","source","accordions","isOpen","handleAccordianToggle","curState","accordionsCopy","toggleThis","handleCloseResults","handleSnackbarClose","toTitleCase","str","replace","txt","charAt","substr","toLowerCase","changeName","onCropComplete","getCroppedImg","image","fileName","canvas","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","window","revokeObjectURL","fileUrl","createObjectURL","console","error","handleCropCancel","render","Typography","variant","noValidate","autoComplete","onSubmit","Autocomplete","onChange","inputValue","onInputChange","disableClearable","forcePopupIcon","disableListWrap","options","renderInput","TextField","label","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","renderOption","option","noWrap","Dialog","open","DialogTitle","DialogContent","href","ruleOfThirds","DialogActions","Button","color","Backdrop","zIndex","CircularProgress","to","featuredBird","Slide","direction","in","mountOnEnter","unmountOnExit","Card","elevation","CardHeader","subheader","CardMedia","placeholder","paddingTop","backgroundSize","CardContent","volume","variation","Accordion","expanded","AccordionSummary","expandIcon","AccordionDetails","TableContainer","Table","TableBody","TableRow","TableCell","tooltipTextFunction","countryName","strokeOpacity","size","innerWidth","Timeline","align","year","TimelineItem","TimelineSeparator","Avatar","TimelineContent","category","CardActions","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Fragment","aria-label","fontSize","Component","IdentificationByLocation","loadAllCountries","countryCodes","countryCode","Country","handleClickOnMapIcon","isMapDialogOpen","Code","handleMapDialogClose","checkCategory","acronym","speciesByCountry","birdsByCountry","filter","species","some","categories","birds","commonName","id","taxonid","onClickFunction","Paper","stickyHeader","TableHead","Credits","App","newName","history","setFeaturedBird","today","Date","month","getMonth","getFullYear","totalMonths","i","floor","setBackground","querySelector","backgroundImage","backgroundPosition","backgroundRepeat","exact","path","routeProps","withRouter","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d59e09d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.9b0c3ed8.jpg\";","const IUCNToken =\r\n  \"f0512ef563faeb29b764227cc256fb6ebab2568eb1d3c0aaad1f5474ab32b0b6\";\r\nexport default IUCNToken;\r\n","import React, { Component } from \"react\";\r\nimport * as tmImage from \"@teachablemachine/image\";\r\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\r\nimport placeholder from \"./placeholder.jpg\";\r\nimport { VariableSizeList } from \"react-window\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport imageModelNames from \"./imageModelNames.json\";\r\nimport AudioPlayer from \"material-ui-audio-player\";\r\nimport fetchJsonp from \"fetch-jsonp\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport { Link } from \"react-router-dom\";\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/Identification.css\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\n\r\n//copy pasted from mui website to virtualize dropdown\r\nconst LISTBOX_PADDING = 8; // px\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  return React.cloneElement(data[index], {\r\n    style: {\r\n      ...style,\r\n      top: style.top + LISTBOX_PADDING,\r\n    },\r\n  });\r\n}\r\nconst OuterElementContext = React.createContext({});\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n  const outerProps = React.useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\nfunction useResetCache(data) {\r\n  const ref = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(\r\n  props,\r\n  ref\r\n) {\r\n  const { children, ...other } = props;\r\n  const itemData = React.Children.toArray(children);\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up(\"sm\"), { noSsr: true });\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 48;\r\n\r\n  const getChildSize = (child) => {\r\n    if (React.isValidElement(child) && child.type === ListSubheader) {\r\n      return 48;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n  const gridRef = useResetCache(itemCount);\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={(index) => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}\r\n        >\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\nListboxComponent.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\nconst renderGroup = (params) => [\r\n  <ListSubheader key={params.key} component=\"div\">\r\n    {params.group}\r\n  </ListSubheader>,\r\n  params.children,\r\n];\r\n\r\nclass Identification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: null,\r\n      searchInputValue: \"\",\r\n      showingResults: false,\r\n      display: {},\r\n      isLoading: false,\r\n      snackbarOpen: false,\r\n      snackbarMessage: \"\",\r\n      accordions: [\r\n        { name: \"Taxonomy\", isOpen: true },\r\n        { name: \"Geographic Range\", isOpen: true },\r\n        { name: \"Population\", isOpen: true },\r\n        { name: \"Habitat and Ecology\", isOpen: true },\r\n        { name: \"Threats\", isOpen: true },\r\n        { name: \"Conservation Actions\", isOpen: true },\r\n      ],\r\n      featuredBird:\r\n        allBirdsWithCommonNames[\r\n          this.props.featuredBird % allBirdsWithCommonNames.length\r\n        ],\r\n      crop: {\r\n        unit: \"%\",\r\n        width: 80,\r\n        aspect: 1 / 1,\r\n      },\r\n      selectedImageHTMLSrc: null,\r\n    };\r\n    this.loadUniqueCommonNames();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.name) this.searchforThisBird(this.props.name);\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    if (this.props.name) this.searchforThisBird(this.props.name);\r\n  };\r\n\r\n  loadUniqueCommonNames = () => {\r\n    this.allCommonNames = [];\r\n    allBirdsWithCommonNames.forEach((bird) => {\r\n      this.allCommonNames.push(...bird.commonNames);\r\n    });\r\n    this.uniqueCommonNames = [...new Set(this.allCommonNames)];\r\n    this.autocompleteOptions = this.uniqueCommonNames.sort((a, b) =>\r\n      a.toUpperCase().localeCompare(b.toUpperCase())\r\n    );\r\n  };\r\n\r\n  handleSearchValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchInputValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputsClear = () => {\r\n    this.setState(() => {\r\n      return { searchValue: null, searchInputValue: \"\" };\r\n    });\r\n  };\r\n\r\n  handleSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchValue) {\r\n      this.setState(\r\n        () => {\r\n          return { isLoading: true, showingResults: false, display: {} };\r\n        },\r\n        () => {\r\n          let birdName = allBirdsWithCommonNames.find((ele) => {\r\n            return ele.commonNames.includes(this.state.searchValue);\r\n          }).name;\r\n          this.fetchDetailsFromAPI(birdName);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          snackbarOpen: true,\r\n          snackbarMessage: \"Empty Input\",\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClickOnCameraIcon = () => {\r\n    const fileSelector = document.createElement(\"input\");\r\n    fileSelector.setAttribute(\"type\", \"file\");\r\n    fileSelector.click();\r\n    fileSelector.onchange = this.selectedImageToHTMLElement;\r\n  };\r\n\r\n  selectedImageToHTMLElement = (e) => {\r\n    const fReader = new FileReader();\r\n    this.selectedImageHTML = document.createElement(\"img\");\r\n    fReader.readAsDataURL(e.target.files[0]);\r\n    fReader.onloadend = (event) => {\r\n      this.selectedImageHTML.src = event.target.result;\r\n      this.setState(() => {\r\n        return { selectedImageHTMLSrc: this.selectedImageHTML.src };\r\n      });\r\n    };\r\n  };\r\n\r\n  handleImageSubmit = () => {\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          selectedImageHTMLSrc: null,\r\n          crop: {\r\n            unit: \"%\",\r\n            width: 80,\r\n            aspect: 1 / 1,\r\n          },\r\n          isLoading: true,\r\n          showingResults: false,\r\n          display: {},\r\n        };\r\n      },\r\n      async () => {\r\n        const URL = \"https://teachablemachine.withgoogle.com/models/-7mqg1t6m/\";\r\n        const modelURL = URL + \"model.json\";\r\n        const metadataURL = URL + \"metadata.json\";\r\n\r\n        try {\r\n          const model = await tmImage.load(modelURL, metadataURL);\r\n          const allPredictions = await model.predict(\r\n            this.selectedImageHTML,\r\n            false\r\n          );\r\n          const sortedPredictions = allPredictions.sort(\r\n            (element1, element2) => element2.probability - element1.probability\r\n          );\r\n          this.findBirdNameFromImage(sortedPredictions[0]);\r\n          this.selectedImageHTML = null;\r\n        } catch (error) {\r\n          this.setState(() => {\r\n            this.selectedImageHTML = null;\r\n            return {\r\n              isLoading: false,\r\n              snackbarMessage: \"Error in Identification\",\r\n              snackbarOpen: true,\r\n            };\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  findBirdNameFromImage = (prediction) => {\r\n    let birdName = imageModelNames.find((ele) => {\r\n      return ele.bird === prediction.className;\r\n    }).name;\r\n    this.fetchDetailsFromAPI(birdName, prediction);\r\n  };\r\n\r\n  fetchDetailsFromAPI = async (birdName, prediction) => {\r\n    try {\r\n      let display = {};\r\n      if (prediction) {\r\n        display.prediction = prediction;\r\n      }\r\n      const individualSpeciesByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const countryOccuranceByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/countries/name/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const historicalAssessmentsByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/species/history/name/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const habitatsByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/habitats/species/name/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const threatsByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/threats/species/name/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const actionsByName = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/measures/species/name/\" +\r\n          birdName +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n\r\n      display.title = individualSpeciesByName.data.result[0].main_common_name;\r\n      display.taxonomy = {\r\n        class: individualSpeciesByName.data.result[0].class,\r\n        family: individualSpeciesByName.data.result[0].family,\r\n        genus: individualSpeciesByName.data.result[0].genus,\r\n        kingdom: individualSpeciesByName.data.result[0].kingdom,\r\n        order: individualSpeciesByName.data.result[0].order,\r\n        phylum: individualSpeciesByName.data.result[0].phylum,\r\n        scientific_name: individualSpeciesByName.data.result[0].scientific_name,\r\n      };\r\n      display.geographicRange = countryOccuranceByName.data.result.map(\r\n        (ele) => {\r\n          return { country: ele.code, value: Math.random() };\r\n        }\r\n      );\r\n      display.population = {\r\n        trend: individualSpeciesByName.data.result[0].population_trend,\r\n        timeline: JSON.parse(\r\n          JSON.stringify(historicalAssessmentsByName.data.result)\r\n        ),\r\n      };\r\n      display.habitats = habitatsByName.data.result.map(\r\n        (habitat) => habitat.habitat\r\n      );\r\n      display.threats = threatsByName.data.result.map((threat) => {\r\n        return {\r\n          title: threat.title,\r\n          timing: threat.timing,\r\n          score: threat.score,\r\n        };\r\n      });\r\n      display.actions = actionsByName.data.result.map((action) => action.title);\r\n      display.audioURL = allBirdsWithCommonNames.find(\r\n        (bird) => bird.name === birdName\r\n      ).soundUrl;\r\n      let wikiJsonpResponse = await fetchJsonp(\r\n        \"https://en.wikipedia.org/w/api.php?format=json&action=query&titles=\" +\r\n          individualSpeciesByName.data.result[0].scientific_name +\r\n          \"&prop=pageimages&piprop=original&redirects=true\"\r\n      );\r\n\r\n      let parsedJson = await wikiJsonpResponse.json();\r\n\r\n      if (Object.values(parsedJson.query.pages)[0].original) {\r\n        display.imageURL = Object.values(\r\n          parsedJson.query.pages\r\n        )[0].original.source;\r\n      }\r\n      this.setState(() => {\r\n        return {\r\n          display,\r\n          showingResults: true,\r\n          isLoading: false,\r\n          accordions: [\r\n            { name: \"Taxonomy\", isOpen: true },\r\n            { name: \"Geographic Range\", isOpen: true },\r\n            { name: \"Population\", isOpen: true },\r\n            { name: \"Habitat and Ecology\", isOpen: true },\r\n            { name: \"Threats\", isOpen: true },\r\n            { name: \"Conservation Actions\", isOpen: true },\r\n          ],\r\n        };\r\n      });\r\n    } catch (error) {\r\n      this.setState(() => {\r\n        return {\r\n          isLoading: false,\r\n          snackbarMessage: \"Error in Fetching Details\",\r\n          snackbarOpen: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleAccordianToggle = (name) => {\r\n    this.setState((curState) => {\r\n      let accordionsCopy = JSON.parse(JSON.stringify(curState.accordions));\r\n      let toggleThis = accordionsCopy.find((ele) => ele.name === name);\r\n      toggleThis.isOpen\r\n        ? (toggleThis.isOpen = false)\r\n        : (toggleThis.isOpen = true);\r\n      return {\r\n        accordions: accordionsCopy,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleCloseResults = () => {\r\n    this.setState(() => {\r\n      return { showingResults: false, display: {} };\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = () => {\r\n    this.setState(() => {\r\n      return { snackbarOpen: false, snackbarMessage: \"\" };\r\n    });\r\n  };\r\n\r\n  toTitleCase = (str) => {\r\n    return str.replace(/\\w\\S*/g, (txt) => {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n  };\r\n\r\n  searchforThisBird = (name) => {\r\n    this.setState(\r\n      () => {\r\n        return { isLoading: true, showingResults: false, display: {} };\r\n      },\r\n      () => {\r\n        this.fetchDetailsFromAPI(name);\r\n        this.props.changeName(null);\r\n      }\r\n    );\r\n  };\r\n\r\n  onCropComplete = async () => {\r\n    this.selectedImageHTML.src = await this.getCroppedImg(\r\n      this.selectedImageHTML,\r\n      this.state.crop,\r\n      \"newFile.jpeg\"\r\n    );\r\n    this.handleImageSubmit();\r\n    this.setState(() => {\r\n      return {\r\n        snackbarOpen: true,\r\n        snackbarMessage: \"Image Loaded!\",\r\n      };\r\n    });\r\n  };\r\n\r\n  getCroppedImg = (image, crop, fileName) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n          //reject(new Error('Canvas is empty'));\r\n          console.error(\"Canvas is empty\");\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        resolve(this.fileUrl);\r\n      }, \"image/jpeg\");\r\n    });\r\n  };\r\n\r\n  handleCropCancel = () => {\r\n    this.selectedImageHTML = null;\r\n    this.setState(() => {\r\n      return {\r\n        selectedImageHTMLSrc: null,\r\n        crop: {\r\n          unit: \"%\",\r\n          width: 80,\r\n          aspect: 1 / 1,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"Identification\">\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h2\"\r\n          className=\"Identification-Heading\"\r\n        >\r\n          Bird Identification\r\n        </Typography>\r\n\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSearchSubmit}>\r\n          <Autocomplete\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValueChange}\r\n            inputValue={this.state.searchInputValue}\r\n            onInputChange={this.handleSearchInputValueChange}\r\n            disableClearable\r\n            forcePopupIcon={false}\r\n            disableListWrap\r\n            ListboxComponent={ListboxComponent}\r\n            renderGroup={renderGroup}\r\n            options={this.autocompleteOptions}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      {this.state.searchInputValue && (\r\n                        <IconButton onClick={this.handleSearchInputsClear}>\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      <IconButton onClick={this.handleClickOnCameraIcon}>\r\n                        <PhotoCameraIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={this.handleSearchSubmit}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n          />\r\n        </form>\r\n\r\n        <Dialog open={this.state.selectedImageHTMLSrc ? true : false}>\r\n          <DialogTitle>Crop image</DialogTitle>\r\n          <DialogContent>\r\n            <div className=\"Identification-CropDialogContent\">\r\n              <Typography>\r\n                Expected output: 1 of the 225 bird species (with highest\r\n                probability) from the trained{\" \"}\r\n                <a href=\"https://teachablemachine.withgoogle.com/models/-7mqg1t6m/\">\r\n                  Machine Learning Model\r\n                </a>\r\n                , which is being used to identify birds.\r\n              </Typography>\r\n              <ReactCrop\r\n                crop={this.state.crop}\r\n                onChange={(crop) => {\r\n                  this.setState({ crop });\r\n                }}\r\n                src={this.state.selectedImageHTMLSrc}\r\n                ruleOfThirds\r\n              />\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button color=\"primary\" onClick={this.handleCropCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button color=\"primary\" onClick={this.onCropComplete}>\r\n              Submit\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Backdrop open={this.state.isLoading} style={{ zIndex: 10 }}>\r\n          {this.state.isLoading && <CircularProgress color=\"inherit\" />}\r\n        </Backdrop>\r\n\r\n        {!this.state.showingResults && (\r\n          <div className=\"Identification-Links\">\r\n            <Link to=\"/bird-identification/locations\">\r\n              <Button>Location-Wise Search</Button>\r\n            </Link>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.changeName(this.state.featuredBird.name);\r\n              }}\r\n            >\r\n              Featured bird: {this.state.featuredBird.commonNames[0]}\r\n            </Button>\r\n\r\n            <Link to=\"/bird-identification/credits\">\r\n              <Button>Credits</Button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n        {this.state.showingResults && (\r\n          <Slide\r\n            direction=\"up\"\r\n            in={this.state.showingResults}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            className=\"Identification-Results\"\r\n          >\r\n            <Card elevation={4}>\r\n              <CardHeader\r\n                title={`${this.state.display.title}`}\r\n                subheader={\r\n                  this.state.display.prediction\r\n                    ? `Prediction: ${\r\n                        this.state.display.prediction.className\r\n                      }, ${this.state.display.prediction.probability * 100}%`\r\n                    : \"\"\r\n                }\r\n              />\r\n              <CardMedia\r\n                image={\r\n                  this.state.display.imageURL\r\n                    ? this.state.display.imageURL\r\n                    : placeholder\r\n                }\r\n                style={{ paddingTop: \"56.25%\", backgroundSize: \"contain\" }}\r\n              />\r\n              {this.state.display.audioURL && (\r\n                <CardContent>\r\n                  <AudioPlayer\r\n                    src={`https:${this.state.display.audioURL}`}\r\n                    volume={false}\r\n                    width=\"inital\"\r\n                    variation=\"primary\"\r\n                    type=\"audio/mpeg\"\r\n                  />\r\n                </CardContent>\r\n              )}\r\n              <CardContent>\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find((ele) => ele.name === \"Taxonomy\")\r\n                      .isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Taxonomy\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Taxonomy</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <TableContainer>\r\n                      <Table>\r\n                        <TableBody>\r\n                          <TableRow>\r\n                            <TableCell>Scientific Name</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.scientific_name\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Kingdom</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.kingdom\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Phylum</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.phylum\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Class</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.class\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Order</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.order\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Family</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.family\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                          <TableRow>\r\n                            <TableCell>Genus</TableCell>\r\n                            <TableCell>\r\n                              {this.toTitleCase(\r\n                                this.state.display.taxonomy.genus\r\n                              )}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Geographic Range\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Geographic Range\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Geographic Range</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-GeographicRange\">\r\n                      <WorldMap\r\n                        color=\"#1976d2\"\r\n                        data={this.state.display.geographicRange}\r\n                        tooltipTextFunction={(countryName) => countryName}\r\n                        strokeOpacity=\"100%\"\r\n                        size={\r\n                          window.innerWidth >= 768\r\n                            ? window.innerWidth >= 1920\r\n                              ? \"lg\"\r\n                              : \"md\"\r\n                            : \"sm\"\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Population\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Population\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Population</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-Population\">\r\n                      <Typography>\r\n                        Population Trend: {this.state.display.population.trend}\r\n                      </Typography>\r\n                      <Timeline align=\"alternate\">\r\n                        {this.state.display.population.timeline.map((year) => (\r\n                          <TimelineItem key={year.year}>\r\n                            <TimelineSeparator>\r\n                              <Avatar variant=\"square\">{year.year}</Avatar>\r\n                            </TimelineSeparator>\r\n                            <TimelineContent>\r\n                              <Typography>{year.category}</Typography>\r\n                            </TimelineContent>\r\n                          </TimelineItem>\r\n                        ))}\r\n                      </Timeline>\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Habitat and Ecology\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Habitat and Ecology\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Habitat and Ecology</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <TableContainer>\r\n                      <Table>\r\n                        <TableBody>\r\n                          {this.state.display.habitats.map((habitat, index) => (\r\n                            <TableRow key={index}>\r\n                              <TableCell>{habitat}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                {this.state.display.threats.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Threats\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() => this.handleAccordianToggle(\"Threats\")}\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Threats</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <TableContainer>\r\n                        <Table>\r\n                          <TableBody>\r\n                            {this.state.display.threats.map((threat, index) => (\r\n                              <TableRow key={index}>\r\n                                <TableCell>{threat.title}</TableCell>\r\n                                <TableCell>{threat.timing}</TableCell>\r\n                                <TableCell>{threat.score}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n\r\n                {this.state.display.actions.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Conservation Actions\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() =>\r\n                        this.handleAccordianToggle(\"Conservation Actions\")\r\n                      }\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Conservation Actions</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <TableContainer>\r\n                        <Table>\r\n                          <TableBody>\r\n                            {this.state.display.actions.map((action, index) => (\r\n                              <TableRow key={index}>\r\n                                <TableCell>{action}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={this.handleCloseResults}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Slide>\r\n        )}\r\n\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleSnackbarClose}\r\n          message={this.state.snackbarMessage}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Identification;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport countryCodes from \"./countryCodes.json\";\r\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\r\n\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/IdentificationByLocation.css\";\r\nclass IdentificationByLocation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: null,\r\n      searchInputValue: \"\",\r\n      isMapDialogOpen: false,\r\n      snackbarOpen: false,\r\n      snackbarMessage: \"\",\r\n      showingResults: false,\r\n      display: {},\r\n      isLoading: false,\r\n      featuredBird:\r\n        allBirdsWithCommonNames[\r\n          this.props.featuredBird % allBirdsWithCommonNames.length\r\n        ],\r\n    };\r\n    this.loadAllCountries();\r\n  }\r\n\r\n  loadAllCountries = () => {\r\n    this.autocompleteOptions = [];\r\n    countryCodes.forEach((countryCode) => {\r\n      this.autocompleteOptions.push(countryCode.Country);\r\n    });\r\n  };\r\n\r\n  handleSearchValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchInputValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputsClear = () => {\r\n    this.setState(() => {\r\n      return { searchValue: null, searchInputValue: \"\" };\r\n    });\r\n  };\r\n\r\n  handleClickOnMapIcon = () => {\r\n    this.setState(() => {\r\n      return { isMapDialogOpen: true };\r\n    });\r\n  };\r\n\r\n  handleSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchValue) {\r\n      this.setState(\r\n        () => {\r\n          return { isLoading: true, showingResults: false, display: {} };\r\n        },\r\n        () => {\r\n          let countryCode = countryCodes.find((country) => {\r\n            return country.Country === this.state.searchValue;\r\n          }).Code;\r\n          this.fetchDetailsFromAPI(countryCode);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          snackbarOpen: true,\r\n          snackbarMessage: \"Empty Input\",\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMapDialogClose = () => {\r\n    this.setState(() => {\r\n      return { isMapDialogOpen: false };\r\n    });\r\n  };\r\n  checkCategory = (acronym) => {\r\n    acronym = acronym.toUpperCase();\r\n    if (acronym === \"LC\") return \"Least-concern\";\r\n    else if (acronym === \"EX\") return \"Extinct\";\r\n    else if (acronym === \"EW\") return \"Extinct in the wild\";\r\n    else if (acronym === \"CR\") return \"Critically endangered\";\r\n    else if (acronym === \"EN\") return \"Endangered\";\r\n    else if (acronym === \"VU\") return \"Vulnerable\";\r\n    else if (acronym === \"NT\") return \"Near threatened\";\r\n    else if (acronym === \"DD\") return \"Data deficient\";\r\n    else if (acronym === \"NE\") return \"Not evaluated\";\r\n    else return acronym;\r\n  };\r\n  fetchDetailsFromAPI = async (country) => {\r\n    try {\r\n      let display = {};\r\n      display.country = countryCodes.find(\r\n        (ele) => ele.Code === country\r\n      ).Country;\r\n      display.data = [];\r\n      const speciesByCountry = await axios.get(\r\n        \"https://apiv3.iucnredlist.org/api/v3/country/getspecies/\" +\r\n          country +\r\n          \"?token=\" +\r\n          APItoken\r\n      );\r\n      const birdsByCountry = speciesByCountry.data.result.filter((species) => {\r\n        return allBirdsWithCommonNames.some(\r\n          (ele) => ele.name === species.scientific_name\r\n        );\r\n      });\r\n\r\n      let categories = birdsByCountry.map((bird) => bird.category);\r\n      let uniqueCategories = [...new Set(categories)];\r\n\r\n      uniqueCategories.forEach((category) => {\r\n        display.data.push({\r\n          category: this.checkCategory(category),\r\n          birds: birdsByCountry\r\n            .filter((bird) => bird.category === category)\r\n            .map((ele) => {\r\n              return {\r\n                commonName: allBirdsWithCommonNames.find(\r\n                  (bird) => bird.name === ele.scientific_name\r\n                ).commonNames[0],\r\n                name: ele.scientific_name,\r\n                id: ele.taxonid,\r\n              };\r\n            }),\r\n        });\r\n      });\r\n      this.setState(() => {\r\n        return {\r\n          display,\r\n          showingResults: true,\r\n          isLoading: false,\r\n        };\r\n      });\r\n    } catch (error) {\r\n      this.setState(() => {\r\n        return {\r\n          isLoading: false,\r\n          snackbarMessage: \"Error in Fetching Details\",\r\n          snackbarOpen: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCloseResults = () => {\r\n    this.setState(() => {\r\n      return { showingResults: false, display: {} };\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = () => {\r\n    this.setState(() => {\r\n      return { snackbarOpen: false, snackbarMessage: \"\" };\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"IdentificationByLocation\">\r\n        <Typography\r\n          component=\"h1\"\r\n          variant=\"h2\"\r\n          className=\"IdentificationByLocation-Heading\"\r\n        >\r\n          Bird Identification\r\n        </Typography>\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSearchSubmit}>\r\n          <Autocomplete\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValueChange}\r\n            inputValue={this.state.searchInputValue}\r\n            onInputChange={this.handleSearchInputValueChange}\r\n            disableClearable\r\n            forcePopupIcon={false}\r\n            disableListWrap\r\n            options={this.autocompleteOptions}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      {this.state.searchInputValue && (\r\n                        <IconButton onClick={this.handleSearchInputsClear}>\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      <IconButton onClick={this.handleClickOnMapIcon}>\r\n                        <MapIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={this.handleSearchSubmit}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n          />\r\n        </form>\r\n        <Dialog\r\n          open={this.state.isMapDialogOpen}\r\n          onClose={this.handleMapDialogClose}\r\n        >\r\n          <WorldMap\r\n            data={countryCodes.map((country) => {\r\n              return {\r\n                country: country.Code,\r\n                value: Math.random(),\r\n              };\r\n            })}\r\n            color=\"#1976d2\"\r\n            tooltipTextFunction={(countryName) => countryName}\r\n            strokeOpacity=\"100%\"\r\n            size=\"lg\"\r\n            onClickFunction={(event, country, code) => {\r\n              this.setState(\r\n                () => {\r\n                  return {\r\n                    isLoading: true,\r\n                    showingResults: false,\r\n                    display: {},\r\n                  };\r\n                },\r\n                () => {\r\n                  this.fetchDetailsFromAPI(code);\r\n                  this.handleMapDialogClose();\r\n                }\r\n              );\r\n            }}\r\n          />\r\n        </Dialog>\r\n        <Backdrop open={this.state.isLoading} style={{ zIndex: 10 }}>\r\n          {this.state.isLoading && <CircularProgress color=\"inherit\" />}\r\n        </Backdrop>\r\n        {!this.state.showingResults && (\r\n          <div className=\"IdentificationByLocation-Links\">\r\n            <Link to=\"/bird-identification\">\r\n              <Button>Search by Name</Button>\r\n            </Link>\r\n            <Button\r\n              onClick={() => {\r\n                this.props.changeName(this.state.featuredBird.name);\r\n              }}\r\n            >\r\n              Featured bird: {this.state.featuredBird.commonNames[0]}\r\n            </Button>\r\n            <Link to=\"/bird-identification/credits\">\r\n              <Button>Credits</Button>\r\n            </Link>\r\n          </div>\r\n        )}\r\n        {this.state.showingResults && (\r\n          <Slide\r\n            direction=\"up\"\r\n            in={this.state.showingResults}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            className=\"IdentificationByLocation-Results\"\r\n          >\r\n            <Card elevation={4}>\r\n              <CardHeader title={`${this.state.display.country}`} />\r\n\r\n              <CardContent>\r\n                {this.state.display.data.map((category) => {\r\n                  return (\r\n                    <TableContainer\r\n                      key={category.category}\r\n                      className=\"IdentificationByLocation-TableContainer\"\r\n                      component={Paper}\r\n                    >\r\n                      <Table stickyHeader>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell>{category.category}</TableCell>\r\n                            <TableCell></TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {category.birds.map((bird) => (\r\n                            <TableRow key={bird.id}>\r\n                              <TableCell>{bird.commonName}</TableCell>\r\n                              <TableCell>\r\n                                <IconButton\r\n                                  onClick={() =>\r\n                                    this.props.changeName(bird.name)\r\n                                  }\r\n                                >\r\n                                  <SearchIcon />\r\n                                </IconButton>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  );\r\n                })}\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={this.handleCloseResults}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Slide>\r\n        )}\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleSnackbarClose}\r\n          message={this.state.snackbarMessage}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default IdentificationByLocation;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// material\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n// css\r\nimport \"./stylesheets/Credits.css\";\r\n\r\nclass Credits extends Component {\r\n  render = () => {\r\n    return (\r\n      <div className=\"Credits\">\r\n        <Typography component=\"h1\" variant=\"h2\" className=\"Credits-Heading\">\r\n          Credits\r\n        </Typography>\r\n        <Typography>\r\n          Bird Identification Model of 225 birds is Trained with the help of{\" \"}\r\n          <a href=\"https://teachablemachine.withgoogle.com/\">\r\n            Teachable Machine\r\n          </a>\r\n          .\r\n        </Typography>\r\n        <Typography>\r\n          <a href=\"https://www.kaggle.com/gpiosenka/100-bird-species\">\r\n            Image Dataset from Kaggle\r\n          </a>{\" \"}\r\n          is used for Training the model.\r\n        </Typography>\r\n        <Typography>\r\n          <a href=\"https://apiv3.iucnredlist.org/\">IUCN Red List API</a> is used\r\n          to fetch information about birds.\r\n        </Typography>\r\n        <Typography>\r\n          <a href=\"https://www.xeno-canto.org/explore/api\">Xeno-canto API</a> is\r\n          used on backend to fetch audio recordings of birds.\r\n        </Typography>\r\n        <Typography>\r\n          <a href=\"https://www.mediawiki.org/wiki/API:Main_page\">\r\n            English Wikipedia API\r\n          </a>{\" \"}\r\n          is used to fetch images of birds.\r\n        </Typography>\r\n        <Typography>\r\n          Contributions to{\" \"}\r\n          <a href=\"https://www.xeno-canto.org/upload\">Xeno-canto</a> by\r\n          uploading audio recordings of birds and to{\" \"}\r\n          <a href=\"https://en.wikipedia.org/wiki/Help:Editing\">Wikipedia</a> by\r\n          correcting information and uploading missing photos of birds are\r\n          greatly encouraged.\r\n        </Typography>\r\n        <Typography>\r\n          Made by <a href=\"mailto:kajolachhra123@gmail.com\">Kajol Achhra</a>,{\" \"}\r\n          <a href=\"mailto:ahujapriyanka913@gmail.com\">Priyanka Ahuja</a>,{\" \"}\r\n          <a href=\"mailto:poojakamrani123@gmail.com\">Pooja Kamrani</a> and{\" \"}\r\n          <a href=\"https://thepmsquare.me/\">Parth Mangtani</a>.\r\n        </Typography>\r\n        <Link to=\"/bird-identification\" className=\"Credits-Back\">\r\n          <Button>Back</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Credits;\r\n","import React, { Component } from \"react\";\nimport Identification from \"./Identification\";\nimport IdentificationByLocation from \"./IdentificationByLocation\";\nimport Credits from \"./Credits\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let featuredBird = this.setFeaturedBird();\n    this.state = {\n      name: null,\n      featuredBird,\n    };\n    this.setBackground();\n  }\n\n  changeName = (newName) => {\n    this.setState(\n      () => {\n        return { name: newName };\n      },\n      () => this.props.history.push(\"/bird-identification\")\n    );\n  };\n  setFeaturedBird = () => {\n    let today = new Date();\n    let month = today.getMonth() + 1;\n    let year = today.getFullYear();\n    let totalMonths = 0;\n    for (let i = 1920; i < year; i++) {\n      totalMonths += 12;\n    }\n    totalMonths += month;\n    let featuredBird = Math.floor((totalMonths * 6969 - 1) / 8);\n    return featuredBird;\n  };\n\n  setBackground = async () => {\n    let wikiJsonpResponse = await fetchJsonp(\n      \"https://en.wikipedia.org/w/api.php?format=json&action=query&titles=\" +\n        allBirdsWithCommonNames[\n          this.state.featuredBird % allBirdsWithCommonNames.length\n        ].name +\n        \"&prop=pageimages&piprop=original&redirects=true\"\n    );\n    let parsedJson = await wikiJsonpResponse.json();\n\n    if (Object.values(parsedJson.query.pages)[0].original) {\n      document.querySelector(\".App\").style.backgroundImage = `url(${\n        Object.values(parsedJson.query.pages)[0].original.source\n      } )`;\n      document.querySelector(\".App\").style.backgroundPosition = \"center\";\n      document.querySelector(\".App\").style.backgroundRepeat = \"no-repeat\";\n      document.querySelector(\".App\").style.backgroundSize = \"cover\";\n    }\n  };\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/bird-identification\"\n            render={(routeProps) => (\n              <Identification\n                {...routeProps}\n                changeName={this.changeName}\n                name={this.state.name}\n                featuredBird={this.state.featuredBird}\n              />\n            )}\n          ></Route>\n          <Route\n            exact\n            path=\"/bird-identification/locations\"\n            render={(routeProps) => (\n              <IdentificationByLocation\n                {...routeProps}\n                changeName={this.changeName}\n                featuredBird={this.state.featuredBird}\n              />\n            )}\n          ></Route>\n          <Route exact path=\"/bird-identification/credits\">\n            <Credits />\n          </Route>\n          <Route path=\"/bird-identification/*\">\n            <Identification />\n          </Route>\n        </Switch>\n      </div>\n    );\n  };\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
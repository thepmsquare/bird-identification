{"version":3,"sources":["placeholder.jpg","IUCNToken.js","Identification.js","App.js","serviceWorker.js","index.js"],"names":["IUCNToken","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","Provider","value","height","map","reduce","a","b","width","outerElementType","innerElementType","overscanCount","renderGroup","params","component","group","key","Identification","loadUniqueCommonNames","allCommonNames","allBirdsWithCommonNames","forEach","bird","push","commonNames","uniqueCommonNames","Set","autocompleteOptions","sort","toUpperCase","localeCompare","handleSearchValueChange","event","newValue","setState","searchValue","handleSearchInputValueChange","searchInputValue","handleSearchInputsClear","handleSearchSubmit","e","preventDefault","state","birdID","find","ele","includes","id","handleCloseResults","fetchDetailsFromAPI","snackbarOpen","snackbarMessage","handleClickOnCameraIcon","fileSelector","document","createElement","setAttribute","click","onchange","selectedImageToHTMLElement","fReader","FileReader","selectedImageHTML","readAsDataURL","target","files","onloadend","src","result","handleImageSubmit","URL","tmImage","model","predict","allPredictions","sortedPredictions","element1","element2","probability","findBirdIDFromImage","prediction","imageModelIDs","className","display","axios","get","APItoken","individualSpeciesByID","countryOccuranceByID","historicalAssessmentsByID","habitatsByID","threatsByID","actionsByID","title","main_common_name","taxonomy","class","family","genus","kingdom","order","phylum","scientific_name","geographicRange","country","code","Math","random","population","trend","population_trend","timeline","JSON","parse","stringify","habitats","habitat","threats","threat","timing","score","actions","action","audioURL","soundUrl","showingResults","handleAccordianToggle","name","curState","accordionsCopy","accordions","toggleThis","isOpen","handleSnackbarClose","render","Typography","variant","noValidate","autoComplete","onSubmit","Autocomplete","onChange","inputValue","onInputChange","disableClearable","forcePopupIcon","disableListWrap","options","renderInput","TextField","label","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","renderOption","option","noWrap","Slide","direction","in","mountOnEnter","unmountOnExit","Card","elevation","CardHeader","subheader","CardMedia","image","placeholder","paddingTop","CardContent","volume","variation","Accordion","expanded","AccordionSummary","expandIcon","AccordionDetails","color","frame","tooltipTextFunction","countryName","Timeline","year","TimelineItem","TimelineSeparator","Avatar","TimelineConnector","TimelineContent","category","CardActions","Button","size","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","Fragment","aria-label","fontSize","predictedResult","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e517bae0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/placeholder.23be8daa.jpg\";","const IUCNToken =\r\n  \"f0512ef563faeb29b764227cc256fb6ebab2568eb1d3c0aaad1f5474ab32b0b6\";\r\nexport default IUCNToken;\r\n","import React, { Component } from \"react\";\r\nimport * as tmImage from \"@teachablemachine/image\";\r\nimport allBirdsWithCommonNames from \"./allBirdsWithCommonNames.json\";\r\nimport placeholder from \"./placeholder.jpg\";\r\nimport { VariableSizeList } from \"react-window\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport APItoken from \"./IUCNToken\";\r\nimport imageModelIDs from \"./imageModelIDs.json\";\r\nimport AudioPlayer from \"material-ui-audio-player\";\r\n// material\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n// material icons\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n// map\r\nimport { WorldMap } from \"react-svg-worldmap\";\r\n// css\r\nimport \"./stylesheets/Identification.css\";\r\n\r\n//copy pasted from mui website to virtualize dropdown\r\nconst LISTBOX_PADDING = 8; // px\r\nfunction renderRow(props) {\r\n  const { data, index, style } = props;\r\n  return React.cloneElement(data[index], {\r\n    style: {\r\n      ...style,\r\n      top: style.top + LISTBOX_PADDING,\r\n    },\r\n  });\r\n}\r\nconst OuterElementContext = React.createContext({});\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n  const outerProps = React.useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\nfunction useResetCache(data) {\r\n  const ref = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(\r\n  props,\r\n  ref\r\n) {\r\n  const { children, ...other } = props;\r\n  const itemData = React.Children.toArray(children);\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up(\"sm\"), { noSsr: true });\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 48;\r\n\r\n  const getChildSize = (child) => {\r\n    if (React.isValidElement(child) && child.type === ListSubheader) {\r\n      return 48;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n  const gridRef = useResetCache(itemCount);\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={(index) => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}\r\n        >\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\nListboxComponent.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\nconst renderGroup = (params) => [\r\n  <ListSubheader key={params.key} component=\"div\">\r\n    {params.group}\r\n  </ListSubheader>,\r\n  params.children,\r\n];\r\n\r\nclass Identification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchValue: null,\r\n      searchInputValue: \"\",\r\n      showingResults: false,\r\n      display: {},\r\n      predictedResult: {},\r\n      snackbarOpen: false,\r\n      snackbarMessage: \"\",\r\n      accordions: [\r\n        { name: \"Taxonomy\", isOpen: true },\r\n        { name: \"Geographic Range\", isOpen: true },\r\n        { name: \"Population\", isOpen: true },\r\n        { name: \"Habitat and Ecology\", isOpen: true },\r\n        { name: \"Threats\", isOpen: true },\r\n        { name: \"Conservation Actions\", isOpen: true },\r\n      ],\r\n    };\r\n    this.loadUniqueCommonNames();\r\n  }\r\n\r\n  loadUniqueCommonNames = () => {\r\n    this.allCommonNames = [];\r\n    allBirdsWithCommonNames.forEach((bird) => {\r\n      this.allCommonNames.push(...bird.commonNames);\r\n    });\r\n    this.uniqueCommonNames = [...new Set(this.allCommonNames)];\r\n    this.autocompleteOptions = this.uniqueCommonNames.sort((a, b) =>\r\n      a.toUpperCase().localeCompare(b.toUpperCase())\r\n    );\r\n  };\r\n\r\n  handleSearchValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputValueChange = (event, newValue) => {\r\n    this.setState({\r\n      searchInputValue: newValue,\r\n    });\r\n  };\r\n\r\n  handleSearchInputsClear = () => {\r\n    this.setState(() => {\r\n      return { searchValue: null, searchInputValue: \"\" };\r\n    });\r\n  };\r\n\r\n  handleSearchSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchValue) {\r\n      let birdID = allBirdsWithCommonNames.find((ele) => {\r\n        return ele.commonNames.includes(this.state.searchValue);\r\n      }).id;\r\n      this.handleCloseResults();\r\n      this.fetchDetailsFromAPI(birdID);\r\n    } else {\r\n      this.setState(() => {\r\n        return {\r\n          snackbarOpen: true,\r\n          snackbarMessage: \"Empty Input\",\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClickOnCameraIcon = () => {\r\n    const fileSelector = document.createElement(\"input\");\r\n    fileSelector.setAttribute(\"type\", \"file\");\r\n    fileSelector.click();\r\n    fileSelector.onchange = this.selectedImageToHTMLElement;\r\n  };\r\n\r\n  selectedImageToHTMLElement = (e) => {\r\n    const fReader = new FileReader();\r\n    this.selectedImageHTML = document.createElement(\"img\");\r\n    fReader.readAsDataURL(e.target.files[0]);\r\n    fReader.onloadend = (event) => {\r\n      this.selectedImageHTML.src = event.target.result;\r\n    };\r\n    this.handleImageSubmit();\r\n    this.setState(() => {\r\n      return {\r\n        snackbarOpen: true,\r\n        snackbarMessage: \"Image Loaded!\",\r\n      };\r\n    });\r\n  };\r\n\r\n  handleImageSubmit = async () => {\r\n    const URL = \"https://teachablemachine.withgoogle.com/models/-7mqg1t6m/\";\r\n    const modelURL = URL + \"model.json\";\r\n    const metadataURL = URL + \"metadata.json\";\r\n    const model = await tmImage.load(modelURL, metadataURL);\r\n    const allPredictions = await model.predict(this.selectedImageHTML, false);\r\n    const sortedPredictions = allPredictions.sort(\r\n      (element1, element2) => element2.probability - element1.probability\r\n    );\r\n    this.findBirdIDFromImage(sortedPredictions[0]);\r\n  };\r\n\r\n  findBirdIDFromImage = (prediction) => {\r\n    let birdID = imageModelIDs.find((ele) => {\r\n      return ele.bird === prediction.className;\r\n    }).id;\r\n    this.handleCloseResults();\r\n    this.fetchDetailsFromAPI(birdID, prediction);\r\n  };\r\n\r\n  fetchDetailsFromAPI = async (birdID, prediction) => {\r\n    let display = {};\r\n    if (prediction) {\r\n      display.prediction = prediction;\r\n    }\r\n    const individualSpeciesByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/species/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n    const countryOccuranceByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/species/countries/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n    const historicalAssessmentsByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/species/history/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n    const habitatsByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/habitats/species/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n    const threatsByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/threats/species/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n    const actionsByID = await axios.get(\r\n      \"https://apiv3.iucnredlist.org/api/v3/measures/species/id/\" +\r\n        birdID +\r\n        \"?token=\" +\r\n        APItoken\r\n    );\r\n\r\n    display.title = individualSpeciesByID.data.result[0].main_common_name;\r\n    display.taxonomy = {\r\n      class: individualSpeciesByID.data.result[0].class,\r\n      family: individualSpeciesByID.data.result[0].family,\r\n      genus: individualSpeciesByID.data.result[0].genus,\r\n      kingdom: individualSpeciesByID.data.result[0].kingdom,\r\n      order: individualSpeciesByID.data.result[0].order,\r\n      phylum: individualSpeciesByID.data.result[0].phylum,\r\n      scientific_name: individualSpeciesByID.data.result[0].scientific_name,\r\n    };\r\n    display.geographicRange = countryOccuranceByID.data.result.map((ele) => {\r\n      return { country: ele.code, value: Math.random() };\r\n    });\r\n    display.population = {\r\n      trend: individualSpeciesByID.data.result[0].population_trend,\r\n      timeline: JSON.parse(\r\n        JSON.stringify(historicalAssessmentsByID.data.result)\r\n      ),\r\n    };\r\n    display.habitats = habitatsByID.data.result.map(\r\n      (habitat) => habitat.habitat\r\n    );\r\n    display.threats = threatsByID.data.result.map((threat) => {\r\n      return {\r\n        title: threat.title,\r\n        timing: threat.timing,\r\n        score: threat.score,\r\n      };\r\n    });\r\n    display.actions = actionsByID.data.result.map((action) => action.title);\r\n    display.audioURL = allBirdsWithCommonNames.find(\r\n      (bird) => bird.id === birdID\r\n    ).soundUrl;\r\n    this.setState(() => {\r\n      return {\r\n        display,\r\n        showingResults: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleAccordianToggle = (name) => {\r\n    this.setState((curState) => {\r\n      let accordionsCopy = JSON.parse(JSON.stringify(curState.accordions));\r\n      let toggleThis = accordionsCopy.find((ele) => ele.name === name);\r\n      toggleThis.isOpen\r\n        ? (toggleThis.isOpen = false)\r\n        : (toggleThis.isOpen = true);\r\n      return {\r\n        accordions: accordionsCopy,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleCloseResults = () => {\r\n    this.setState(() => {\r\n      return { showingResults: false, display: {} };\r\n    });\r\n  };\r\n\r\n  handleSnackbarClose = () => {\r\n    this.setState(() => {\r\n      return { snackbarOpen: false };\r\n    });\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"Identification\">\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n          Bird Identification\r\n        </Typography>\r\n\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSearchSubmit}>\r\n          <Autocomplete\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValueChange}\r\n            inputValue={this.state.searchInputValue}\r\n            onInputChange={this.handleSearchInputValueChange}\r\n            disableClearable\r\n            forcePopupIcon={false}\r\n            disableListWrap\r\n            ListboxComponent={ListboxComponent}\r\n            renderGroup={renderGroup}\r\n            options={this.autocompleteOptions}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      {this.state.searchInputValue && (\r\n                        <IconButton onClick={this.handleSearchInputsClear}>\r\n                          <CloseIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      <IconButton onClick={this.handleClickOnCameraIcon}>\r\n                        <PhotoCameraIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={this.handleSearchSubmit}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n          />\r\n        </form>\r\n        {!this.state.showingResults && (\r\n          <div className=\"Identification-Links\">\r\n            <Typography>Location-Wise Search</Typography>\r\n            <Typography>Endangered Birds</Typography>\r\n            <Typography>Featured bird: White-headed Duck</Typography>\r\n          </div>\r\n        )}\r\n        {this.state.showingResults && (\r\n          <Slide\r\n            direction=\"up\"\r\n            in={this.state.showingResults}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            className=\"Identification-Results\"\r\n          >\r\n            <Card elevation={4}>\r\n              <CardHeader\r\n                title={`${this.state.display.title}`}\r\n                subheader={\r\n                  this.state.display.prediction\r\n                    ? `Prediction: ${\r\n                        this.state.display.prediction.className\r\n                      }, ${this.state.display.prediction.probability * 100}%`\r\n                    : \"\"\r\n                }\r\n              />\r\n              <CardMedia image={placeholder} style={{ paddingTop: \"56.25%\" }} />\r\n              {this.state.display.audioURL && (\r\n                <CardContent>\r\n                  <AudioPlayer\r\n                    src={`https:${this.state.display.audioURL}`}\r\n                    volume={false}\r\n                    width=\"inital\"\r\n                    variation=\"primary\"\r\n                  />\r\n                </CardContent>\r\n              )}\r\n              <CardContent>\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find((ele) => ele.name === \"Taxonomy\")\r\n                      .isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Taxonomy\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Taxonomy</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-Taxonomy\">\r\n                      <Typography>Scientific Name</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.scientific_name}\r\n                      </Typography>\r\n\r\n                      <Typography>Kingdom</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.kingdom}\r\n                      </Typography>\r\n\r\n                      <Typography>Phylum</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.phylum}\r\n                      </Typography>\r\n\r\n                      <Typography>Class</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.class}\r\n                      </Typography>\r\n\r\n                      <Typography>Order</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.order}\r\n                      </Typography>\r\n\r\n                      <Typography>Family</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.family}\r\n                      </Typography>\r\n\r\n                      <Typography>Genus</Typography>\r\n                      <Typography>\r\n                        {this.state.display.taxonomy.genus}\r\n                      </Typography>\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Geographic Range\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Geographic Range\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Geographic Range</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-GeographicRange\">\r\n                      <WorldMap\r\n                        color=\"#1976d2\"\r\n                        data={this.state.display.geographicRange}\r\n                        frame\r\n                        tooltipTextFunction={(countryName) => countryName}\r\n                      />\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Population\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() => this.handleAccordianToggle(\"Population\")}\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Population</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-Population\">\r\n                      <Typography>\r\n                        Population Trend: {this.state.display.population.trend}\r\n                      </Typography>\r\n                      <Timeline>\r\n                        {this.state.display.population.timeline.map((year) => (\r\n                          <TimelineItem key={year.year}>\r\n                            <TimelineSeparator>\r\n                              <Avatar variant=\"square\">{year.year}</Avatar>\r\n                              <TimelineConnector />\r\n                            </TimelineSeparator>\r\n                            <TimelineContent>{year.category}</TimelineContent>\r\n                          </TimelineItem>\r\n                        ))}\r\n                      </Timeline>\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion\r\n                  expanded={\r\n                    this.state.accordions.find(\r\n                      (ele) => ele.name === \"Habitat and Ecology\"\r\n                    ).isOpen\r\n                  }\r\n                >\r\n                  <AccordionSummary\r\n                    onClick={() =>\r\n                      this.handleAccordianToggle(\"Habitat and Ecology\")\r\n                    }\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                  >\r\n                    <Typography>Habitat and Ecology</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <div className=\"Identification-HabitatAndEcology\">\r\n                      {this.state.display.habitats.map((habitat, index) => (\r\n                        <Typography key={index}>{habitat}</Typography>\r\n                      ))}\r\n                    </div>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                {this.state.display.threats.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Threats\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() => this.handleAccordianToggle(\"Threats\")}\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Threats</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <div className=\"Identification-Threats\">\r\n                        {this.state.display.threats.map((threat, index) => (\r\n                          <div\r\n                            key={index}\r\n                            className=\"Identification-ThreatsRow\"\r\n                          >\r\n                            <Typography>{threat.title}</Typography>\r\n                            <Typography>{threat.timing}</Typography>\r\n                            <Typography>{threat.score}</Typography>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n\r\n                {this.state.display.actions.length !== 0 && (\r\n                  <Accordion\r\n                    expanded={\r\n                      this.state.accordions.find(\r\n                        (ele) => ele.name === \"Conservation Actions\"\r\n                      ).isOpen\r\n                    }\r\n                  >\r\n                    <AccordionSummary\r\n                      onClick={() =>\r\n                        this.handleAccordianToggle(\"Conservation Actions\")\r\n                      }\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                    >\r\n                      <Typography>Conservation Actions</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                      <div className=\"Identification-ConservationActions\">\r\n                        {this.state.display.actions.map((action, index) => (\r\n                          <Typography key={index}>{action}</Typography>\r\n                        ))}\r\n                      </div>\r\n                    </AccordionDetails>\r\n                  </Accordion>\r\n                )}\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  size=\"small\"\r\n                  color=\"secondary\"\r\n                  onClick={this.handleCloseResults}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Slide>\r\n        )}\r\n\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          }}\r\n          open={this.state.snackbarOpen}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleSnackbarClose}\r\n          message={this.state.snackbarMessage}\r\n          action={\r\n            <React.Fragment>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={this.handleSnackbarClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Identification;\r\n","import React, { Component } from \"react\";\nimport Identification from \"./Identification\";\nimport \"./stylesheets/App.css\";\n\nclass App extends Component {\n  render = () => {\n    return (\n      <div className=\"App\">\n        <Identification />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}